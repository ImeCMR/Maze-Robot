# -*- coding: utf-8 -*-
"""s14216_Assignment 2 [Random Forest]

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vWEcC0a6pXqaftyf-08-Q2xTQzp_CIH

# Bike Buyers

This dataset has details of 1000 users from different backgrounds and whether or not they buy a bike. This data can be used for prediction models using Machine Learning Algorithms.

Columns -

ID
Marital Status
Gender
Income
Children
Education
Occupation
Home Owner
Cars
Commute Distance
Region
Age
Purchased Bike

Importing libraries
"""

import numpy as np
import pandas as pd
from sklearn import preprocessing
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.simplefilter(action='ignore')

"""Importing the CSV file and readin the file"""

datafile =  pd.read_csv('https://raw.githubusercontent.com/iMeshCMR/Machine_Learning/main/Bike_Buyers%20_data.csv', sep=",")
print(datafile.head())

"""Decribing the data file"""

datafile.describe()

"""View statistical properties of the datafile
Checking whether there is any missing values in the datafile
"""

datafile.isnull().sum()

"""Checking all the column names"""

datafile.columns

"""Drop useless data"""

#Because there are some string values that cant be cateorised
datafile=datafile.drop(['ID','Income','Children','Cars','Commute Distance','Region','Age'], axis=1)
datafile.head()

"""View categorical varibales"""

Categorical = [var for var in datafile.columns if datafile[var].dtype=='O']
datafile[Categorical].head()

"""Checking the distribution of the data set"""

#Here dependent data will mainly focused
datafile.Purchased_Bike.value_counts()
sns.countplot(x="Purchased_Bike", data=datafile)
plt.show()

"""Checking all the unique categories in Education and Occupation before turn into numerical"""

datafile.Education.unique()

datafile.Occupation.unique()

"""Assining vlues in the Purchased_Bike column to numerical values"""

scale_mapper_Education = {'Bachelors':1, 'Partial College':2, 'High School':3,
       'Partial High School':4, 'Graduate Degree':5}
scale_mapper_Occupation = {'Skilled Manual':1, 'Clerical':2, 'Professional':3, 'Manual':4,
       'Management':5}
scale_mapper_Marital_Status = {"Married":1,"Single":0}
scale_mapper_Gender	 = {"Male":1,"Female":0}
scale_mapper_Home_Owner = {"Yes":1,"No":0}
scale_mapper_Purchased_Bike = {"Yes":1,"No":0}

datafile["Education_N"] = datafile["Education"].replace(scale_mapper_Education)
datafile["Occupation_N"] = datafile["Occupation"].replace(scale_mapper_Occupation)
datafile["Marital_Status_N"] = datafile["Marital_Status"].replace(scale_mapper_Marital_Status)
datafile["Gender_N"] = datafile["Gender"].replace(scale_mapper_Gender)
datafile["Home_Owner_N"] = datafile["Home_Owner"].replace(scale_mapper_Home_Owner)
datafile["Purchased_Bike_N"] = datafile["Purchased_Bike"].replace(scale_mapper_Purchased_Bike)

print(datafile.head())

"""Droping Buying which is not numerical ........... there's the column that converted to numerical
(Class_value_num)
"""

datafile=datafile.drop(["Education"], axis=1)
datafile=datafile.drop(["Occupation"], axis=1)
datafile=datafile.drop(["Marital_Status"], axis=1)
datafile=datafile.drop(["Gender"], axis=1)
datafile=datafile.drop(["Home_Owner"], axis=1)
datafile=datafile.drop(["Purchased_Bike"], axis=1)
datafile.head()

""" Splitting data set to train and test the accuracy later"""

from sklearn.model_selection import train_test_split
y = datafile.Purchased_Bike_N.values
x_data = datafile.drop(['Purchased_Bike_N'], axis = 1)

x_train, x_test, y_train, y_test = train_test_split(x_data,y,test_size = 0.2,random_state=0) #20% for the test size
x_train

"""Decision tree"""

from sklearn.tree import DecisionTreeClassifier
DisTrClass = DecisionTreeClassifier()
DisTrClass.fit(x_train, y_train)

"""Acuracy od Decision tree"""

DisTrClass.score(x_test, y_test)*100

"""Random forest"""

from sklearn.ensemble import RandomForestClassifier
RandForClass = RandomForestClassifier()
RandForClass.fit(x_train, y_train)

"""Checking acuracy of Random Forest"""

RandForClass.score(x_test, y_test)*100

"""Develop confusion matrix"""

y_DisTrClass = DisTrClass.predict(x_test)
y_RandForClass = RandForClass.predict(x_test)

from sklearn.metrics import confusion_matrix

CM_DisTrClass = confusion_matrix(y_test,y_DisTrClass)
CM_RandForClass = confusion_matrix(y_test,y_RandForClass)

plt.subplot(2,3,1)
plt.title("Decision Tree Classifier Confusion Matrix")
sns.heatmap(CM_DisTrClass,annot=True,cmap="cool",fmt="d",cbar=False)

plt.subplot(2,3,2)
plt.title("Random Forest Confusion Matrix")
sns.heatmap(CM_RandForClass,annot=True,cmap="cool",fmt="d",cbar=False)